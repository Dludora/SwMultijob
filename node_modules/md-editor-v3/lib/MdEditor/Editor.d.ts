import { PropType, CSSProperties } from 'vue';
import { ToolbarNames, HeadList, MarkedHeadingId, Themes, InnerError, Footers } from './type';
export declare const markedHeadingId: MarkedHeadingId;
declare const Editor: import("vue").DefineComponent<{
    modelValue: {
        type: PropType<string>;
        default: string;
    };
    theme: {
        type: PropType<Themes>;
        default: string;
    };
    class: {
        type: StringConstructor;
        default: string;
    };
    historyLength: {
        type: PropType<number>;
        default: number;
    };
    onChange: {
        type: PropType<(v: string) => void>;
    };
    onSave: {
        type: PropType<(v: string) => void>;
    };
    onUploadImg: {
        type: PropType<(files: Array<File>, callBack: (urls: string[]) => void) => void>;
    };
    pageFullScreen: {
        type: PropType<boolean>;
        default: boolean;
    };
    preview: {
        type: PropType<boolean>;
        default: boolean;
    };
    htmlPreview: {
        type: PropType<boolean>;
        default: boolean;
    };
    previewOnly: {
        type: PropType<boolean>;
        default: boolean;
    };
    language: {
        type: PropType<string>;
        default: string;
    };
    toolbars: {
        type: PropType<ToolbarNames[]>;
        default: string[];
    };
    toolbarsExclude: {
        type: PropType<ToolbarNames[]>;
        default: never[];
    };
    noPrettier: {
        type: PropType<boolean>;
        default: boolean;
    };
    onHtmlChanged: {
        type: PropType<(h: string) => void>;
    };
    onGetCatalog: {
        type: PropType<(list: HeadList[]) => void>;
    };
    editorId: {
        type: PropType<string>;
        default: string;
    };
    tabWidth: {
        type: PropType<number>;
        default: number;
    };
    showCodeRowNumber: {
        type: PropType<boolean>;
        default: boolean;
    };
    previewTheme: {
        type: PropType<string>;
        default: string;
    };
    style: {
        type: PropType<string | CSSProperties>;
        default: () => {};
    };
    markedHeadingId: {
        type: PropType<MarkedHeadingId>;
        default: MarkedHeadingId;
    };
    tableShape: {
        type: PropType<number[]>;
        default: () => number[];
    };
    noMermaid: {
        type: PropType<boolean>;
        default: boolean;
    };
    sanitize: {
        type: PropType<(html: string) => string>;
        default: (html: string) => string;
    };
    placeholder: {
        type: PropType<string>;
        default: string;
    };
    noKatex: {
        type: PropType<boolean>;
        default: boolean;
    };
    defToolbars: {
        type: PropType<string | JSX.Element>;
    };
    onError: {
        type: PropType<(err: InnerError) => void>;
    };
    codeTheme: {
        type: PropType<string>;
        default: string;
    };
    footers: {
        type: PropType<Footers[]>;
        default: Footers[];
    };
    scrollAuto: {
        type: PropType<boolean>;
        default: boolean;
    };
    defFooters: {
        type: PropType<string | JSX.Element>;
    };
}, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, import("vue").EmitsOptions, "onSave" | "onError" | "onUploadImg" | "onChange" | "onHtmlChanged" | "onGetCatalog" | "update:modelValue", import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    modelValue: {
        type: PropType<string>;
        default: string;
    };
    theme: {
        type: PropType<Themes>;
        default: string;
    };
    class: {
        type: StringConstructor;
        default: string;
    };
    historyLength: {
        type: PropType<number>;
        default: number;
    };
    onChange: {
        type: PropType<(v: string) => void>;
    };
    onSave: {
        type: PropType<(v: string) => void>;
    };
    onUploadImg: {
        type: PropType<(files: Array<File>, callBack: (urls: string[]) => void) => void>;
    };
    pageFullScreen: {
        type: PropType<boolean>;
        default: boolean;
    };
    preview: {
        type: PropType<boolean>;
        default: boolean;
    };
    htmlPreview: {
        type: PropType<boolean>;
        default: boolean;
    };
    previewOnly: {
        type: PropType<boolean>;
        default: boolean;
    };
    language: {
        type: PropType<string>;
        default: string;
    };
    toolbars: {
        type: PropType<ToolbarNames[]>;
        default: string[];
    };
    toolbarsExclude: {
        type: PropType<ToolbarNames[]>;
        default: never[];
    };
    noPrettier: {
        type: PropType<boolean>;
        default: boolean;
    };
    onHtmlChanged: {
        type: PropType<(h: string) => void>;
    };
    onGetCatalog: {
        type: PropType<(list: HeadList[]) => void>;
    };
    editorId: {
        type: PropType<string>;
        default: string;
    };
    tabWidth: {
        type: PropType<number>;
        default: number;
    };
    showCodeRowNumber: {
        type: PropType<boolean>;
        default: boolean;
    };
    previewTheme: {
        type: PropType<string>;
        default: string;
    };
    style: {
        type: PropType<string | CSSProperties>;
        default: () => {};
    };
    markedHeadingId: {
        type: PropType<MarkedHeadingId>;
        default: MarkedHeadingId;
    };
    tableShape: {
        type: PropType<number[]>;
        default: () => number[];
    };
    noMermaid: {
        type: PropType<boolean>;
        default: boolean;
    };
    sanitize: {
        type: PropType<(html: string) => string>;
        default: (html: string) => string;
    };
    placeholder: {
        type: PropType<string>;
        default: string;
    };
    noKatex: {
        type: PropType<boolean>;
        default: boolean;
    };
    defToolbars: {
        type: PropType<string | JSX.Element>;
    };
    onError: {
        type: PropType<(err: InnerError) => void>;
    };
    codeTheme: {
        type: PropType<string>;
        default: string;
    };
    footers: {
        type: PropType<Footers[]>;
        default: Footers[];
    };
    scrollAuto: {
        type: PropType<boolean>;
        default: boolean;
    };
    defFooters: {
        type: PropType<string | JSX.Element>;
    };
}>>, {
    pageFullScreen: boolean;
    preview: boolean;
    htmlPreview: boolean;
    editorId: string;
    noPrettier: boolean;
    tabWidth: number;
    theme: Themes;
    historyLength: number;
    previewOnly: boolean;
    showCodeRowNumber: boolean;
    previewTheme: string;
    style: string | CSSProperties;
    class: string;
    scrollAuto: boolean;
    modelValue: string;
    language: string;
    toolbars: ToolbarNames[];
    toolbarsExclude: ToolbarNames[];
    markedHeadingId: MarkedHeadingId;
    tableShape: number[];
    noMermaid: boolean;
    sanitize: (html: string) => string;
    placeholder: string;
    noKatex: boolean;
    codeTheme: string;
    footers: Footers[];
}>;
export default Editor;
